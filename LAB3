#include <iostream>
#include <cmath>
#include <vector>
using namespace std;

// Абстрактный базовый класс Точка
class Point {
protected:
    double x, y;
public:
    Point(double x = 0, double y = 0) : x(x), y(y) {}
    virtual ~Point() = default;
    
    // Чисто виртуальные методы
    virtual void draw() const = 0;
    virtual void hide() const = 0;
    
    // Общие методы
    void move(double dx, double dy) {
        x += dx;
        y += dy;
        cout << "Moved to (" << x << ", " << y << ")\n";
    }
    
    virtual void print() const {
        cout << "Point at (" << x << ", " << y << ")";
    }
    
    // Методы доступа
    double getX() const { return x; }
    double getY() const { return y; }
    void setX(double newX) { x = newX; }
    void setY(double newY) { y = newY; }
};

// Класс Линия
class Line : public Point {
protected:
    double x2, y2;
public:
    Line(double x1, double y1, double x2, double y2)
        : Point(x1, y1), x2(x2), y2(y2) {}
    
    void draw() const override {
        cout << "Drawing Line from (" << x << ", " << y 
             << ") to (" << x2 << ", " << y2 << ")\n";
    }
    
    void hide() const override {
        cout << "Hiding Line from (" << x << ", " << y 
             << ") to (" << x2 << ", " << y2 << ")\n";
    }
    
    void move(double dx, double dy) override {
        Point::move(dx, dy);
        x2 += dx;
        y2 += dy;
    }
    
    void rotate(double angle) {
        double midX = (x + x2) / 2;
        double midY = (y + y2) / 2;
        
        // Перенос в начало координат
        x -= midX; y -= midY;
        x2 -= midX; y2 -= midY;
        
        // Поворот
        double rad = angle * M_PI / 180;
        double newX = x * cos(rad) - y * sin(rad);
        double newY = x * sin(rad) + y * cos(rad);
        double newX2 = x2 * cos(rad) - y2 * sin(rad);
        double newY2 = x2 * sin(rad) + y2 * cos(rad);
        
        // Обратный перенос
        x = newX + midX; y = newY + midY;
        x2 = newX2 + midX; y2 = newY2 + midY;
        
        cout << "Rotated by " << angle << " degrees\n";
    }
    
    void print() const override {
        cout << "Line from (" << x << ", " << y 
             << ") to (" << x2 << ", " << y2 << ")\n";
    }
};

// Базовый класс Квадрат (для виртуального наследования)
class SquareBase : virtual public Point {
protected:
    double side;
public:
    SquareBase(double x, double y, double side)
        : Point(x, y), side(side) {}
    
    void draw() const override {
        cout << "Drawing Square at (" << x << ", " << y 
             << ") with side " << side << endl;
    }
    
    void hide() const override {
        cout << "Hiding Square at (" << x << ", " << y 
             << ") with side " << side << endl;
    }
    
    virtual void rotate(double angle) {
        cout << "Rotating Square by " << angle << " degrees\n";
    }
    
    void print() const override {
        cout << "Square at (" << x << ", " << y 
             << ") with side " << side << endl;
    }
};

// Класс Квадрат
class Square : public SquareBase {
public:
    Square(double x, double y, double side)
        : Point(x, y), SquareBase(x, y, side) {}
};

// Класс Ромб
class Rhombus : public SquareBase {
protected:
    double angle;
public:
    Rhombus(double x, double y, double side, double angle)
        : Point(x, y), SquareBase(x, y, side), angle(angle) {}
    
    void draw() const override {
        cout << "Drawing Rhombus at (" << x << ", " << y 
             << ") with side " << side << " and angle " << angle << endl;
    }
    
    void hide() const override {
        cout << "Hiding Rhombus at (" << x << ", " << y 
             << ") with side " << side << " and angle " << angle << endl;
    }
    
    void rotate(double a) override {
        angle += a;
        cout << "Rotated Rhombus. New angle: " << angle << " degrees\n";
    }
};

// Класс Прямоугольник
class Rectangle : public SquareBase {
protected:
    double height;
public:
    Rectangle(double x, double y, double width, double height)
        : Point(x, y), SquareBase(x, y, width), height(height) {}
    
    void draw() const override {
        cout << "Drawing Rectangle at (" << x << ", " << y 
             << ") with width " << side << " and height " << height << endl;
    }
    
    void hide() const override {
        cout << "Hiding Rectangle at (" << x << ", " << y 
             << ") with width " << side << " and height " << height << endl;
    }
    
    void rotate(double angle) override {
        cout << "Rotated Rectangle by " << angle << " degrees\n";
    }
};

// Класс Параллелограмм (виртуальное наследование от SquareBase)
class Parallelogram : virtual public SquareBase {
protected:
    double height;
    double angle;
public:
    Parallelogram(double x, double y, double side, double height, double angle)
        : Point(x, y), SquareBase(x, y, side), height(height), angle(angle) {}
    
    void draw() const override {
        cout << "Drawing Parallelogram at (" << x << ", " << y 
             << ") with side " << side << ", height " << height 
             << " and angle " << angle << endl;
    }
    
    void hide() const override {
        cout << "Hiding Parallelogram at (" << x << ", " << y 
             << ") with side " << side << ", height " << height 
             << " and angle " << angle << endl;
    }
    
    void rotate(double a) override {
        angle += a;
        cout << "Rotated Parallelogram. New angle: " << angle << " degrees\n";
    }
};

// Функция для демонстрации позднего связывания
void demonstratePolymorphism(Point* shape) {
    shape->draw();
    shape->move(1, 1);
    shape->hide();
    cout << "Current position: (" << shape->getX() << ", " << shape->getY() << ")\n";
    cout << "-----------------\n";
}

int main() {
    // Создание объектов
    Line line(0, 0, 2, 2);
    Square square(1, 1, 3);
    Rhombus rhombus(2, 2, 4, 45);
    Rectangle rectangle(3, 3, 5, 3);
    Parallelogram parallelogram(4, 4, 6, 4, 30);

    // Демонстрация методов
    vector<Point*> shapes = {&line, &square, &rhombus, &rectangle, &parallelogram};
    
    for (auto shape : shapes) {
        demonstratePolymorphism(shape);
    }

    // Проверка методов конкретных классов
    cout << "=== Testing specific methods ===\n";
    line.rotate(45);
    rhombus.rotate(15);
    parallelogram.rotate(10);

    return 0;
}
